'use client';

import { useState, useEffect } from 'react';
import { ApiClient } from '@/lib/api-client';
import { ENVIRONMENTS } from '@/lib/environments';

// TypeScript interfaces matching the MOGS GraphQL schema
interface DocumentType {
  id: string;
  description?: string;
  noteType?: boolean;
  attachmentType?: boolean;
  addPermissionId?: number;
  deletePermissionId?: number;
  editPermissionId?: number;
  viewPermissionId?: number;
  confidential?: boolean;
}

interface LeaderAttachment {
  id: string;
  cmisId?: number;
  documentType?: DocumentType;
  title?: string;
  sourceFileLocation?: string;
  fileType?: string;
  fileSize?: number;
  fileContent?: string;
  createDate?: string;
  createdBy?: string;
  updateDate?: string;
  updatedBy?: string;
}

interface SearchHistory {
  id: string;
  attachmentId: string;
  timestamp: Date;
  resultFound: boolean;
  attachmentTitle?: string;
}

export default function MOGSLeaderAttachmentPage() {
  const [selectedEnvironment, setSelectedEnvironment] = useState('mogs-gql-dev');
  const [attachmentId, setAttachmentId] = useState('');
  const [attachment, setAttachment] = useState<LeaderAttachment | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchHistory, setSearchHistory] = useState<SearchHistory[]>([]);
  const [apiClient, setApiClient] = useState<ApiClient | null>(null);

  // Utility functions
  const formatDate = (dateString?: string) => {
    if (!dateString) return 'N/A';
    try {
      return new Date(dateString).toLocaleDateString();
    } catch {
      return dateString;
    }
  };

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return 'N/A';
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  const formatBoolean = (val?: boolean) => {
    if (val === undefined || val === null) return 'N/A';
    return val ? 'Yes' : 'No';
  };

  const exportToJson = () => {
    if (!attachment) return;
    
    const dataStr = JSON.stringify(attachment, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = `leader-attachment-${attachment.id}-${new Date().toISOString().split('T')[0]}.json`;
    
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const clearSearch = () => {
    setAttachmentId('');
    setAttachment(null);
    setError(null);
  };

  const clearHistory = () => {
    setSearchHistory([]);
    localStorage.removeItem('mogs-leader-attachment-search-history');
  };

  const handleLoadFromHistory = (entry: SearchHistory) => {
    setAttachmentId(entry.attachmentId);
  };

  // Load search history from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('mogs-leader-attachment-search-history');
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        setSearchHistory(parsed.map((item: any) => ({
          ...item,
          timestamp: new Date(item.timestamp)
        })));
      } catch (error) {
        console.error('Error loading search history:', error);
      }
    }
  }, []);

  // Initialize API client when environment changes
  useEffect(() => {
    try {
      const config = ENVIRONMENTS[selectedEnvironment];
      if (!config) {
        setError(`Environment "${selectedEnvironment}" not found`);
        return;
      }
      setApiClient(new ApiClient(config, selectedEnvironment));
      setError(null);
    } catch (err) {
      console.error('Error initializing API client:', err);
      setError('Failed to initialize API client');
    }
  }, [selectedEnvironment]);

  const saveSearchHistory = (searchAttachmentId: string, found: boolean, attachmentTitle?: string) => {
    const newEntry: SearchHistory = {
      id: Date.now().toString(),
      attachmentId: searchAttachmentId,
      timestamp: new Date(),
      resultFound: found,
      attachmentTitle
    };
    
    const updatedHistory = [newEntry, ...searchHistory.slice(0, 9)]; // Keep last 10 searches
    setSearchHistory(updatedHistory);
    localStorage.setItem('mogs-leader-attachment-search-history', JSON.stringify(updatedHistory));
  };

  const searchAttachment = async () => {
    if (!apiClient) {
      setError('API client not initialized. Please refresh the page.');
      return;
    }

    if (!attachmentId.trim()) {
      setError('Please enter a Leader Attachment ID');
      return;
    }

    setLoading(true);
    setError(null);
    setAttachment(null);

    const query = `
      query LeaderAttachmentQuery($id: ID!) {
        leaderAttachment(id: $id) {
          id
          cmisId
          documentType {
            id
            description
            noteType
            attachmentType
            addPermissionId
            deletePermissionId
            editPermissionId
            viewPermissionId
            confidential
          }
          title
          sourceFileLocation
          fileType
          fileSize
          fileContent
          createDate
          createdBy
          updateDate
          updatedBy
        }
      }
    `;

    const variables = { id: attachmentId.trim() };

    try {
      const response = await apiClient.executeGraphQLQuery(query, variables);

      if (response.errors && response.errors.length > 0) {
        throw new Error(response.errors.map(err => err.message).join(', '));
      }

      if (response.data && (response.data as any).leaderAttachment) {
        const attachmentData = (response.data as any).leaderAttachment;
        setAttachment(attachmentData);
        saveSearchHistory(attachmentId.trim(), true, attachmentData.title);
      } else {
        setError('No leader attachment found with the provided ID');
        saveSearchHistory(attachmentId.trim(), false);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';
      setError(errorMessage);
      saveSearchHistory(attachmentId.trim(), false);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center gap-2 mb-6">
        <span className="text-2xl">üìé</span>
        <h1 className="text-2xl font-bold">MOGS Leader Attachment</h1>
        <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">Missionary Oracle Graph Service</span>
      </div>

      {/* Environment Selector */}
      <div className="bg-white border border-gray-200 rounded-lg p-4">
        <div className="flex items-center gap-4">
          <label htmlFor="environment" className="text-sm font-medium text-gray-700">Environment:</label>
          <select
            id="environment"
            value={selectedEnvironment}
            onChange={(e) => setSelectedEnvironment(e.target.value)}
            className="border border-gray-300 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {Object.entries(ENVIRONMENTS).map(([key, env]) => (
              <option key={key} value={key}>
                {env.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Search Section */}
      <div className="bg-white border border-gray-200 rounded-lg p-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">üîç Search Leader Attachment by ID</h2>
        <div className="flex gap-4 items-end">
          <div className="flex-1">
            <label htmlFor="attachment-id" className="block text-sm font-medium text-gray-700 mb-1">Leader Attachment ID (Required)</label>
            <input
              id="attachment-id"
              type="text"
              placeholder="Enter leader attachment ID"
              value={attachmentId}
              onChange={(e) => setAttachmentId(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && searchAttachment()}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button
            onClick={searchAttachment}
            disabled={loading || !attachmentId.trim() || !apiClient}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Searching...' : 'Search'}
          </button>
          <button
            onClick={clearSearch}
            className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Clear
          </button>
        </div>
      </div>

      {/* Search History */}
      {searchHistory.length > 0 && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-900">üìà Recent Searches</h2>
            <button
              onClick={clearHistory}
              className="text-sm text-red-600 hover:text-red-800"
            >
              Clear History
            </button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {searchHistory.slice(0, 6).map((entry) => (
              <div
                key={entry.id}
                onClick={() => handleLoadFromHistory(entry)}
                className="p-3 border border-gray-200 rounded-md cursor-pointer hover:bg-gray-50 flex items-center justify-between"
              >
                <div>
                  <div className="font-mono text-sm">{entry.attachmentId}</div>
                  {entry.attachmentTitle && (
                    <div className="text-xs text-gray-600 truncate">{entry.attachmentTitle}</div>
                  )}
                  <div className="text-xs text-gray-500">
                    {entry.timestamp.toLocaleDateString()}
                  </div>
                </div>
                <div className={`w-2 h-2 rounded-full ${
                  entry.resultFound ? 'bg-green-500' : 'bg-red-500'
                }`} />
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="text-red-800">{error}</div>
        </div>
      )}

      {/* Leader Attachment Details */}
      {attachment && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900">Leader Attachment Details</h2>
            <button
              onClick={exportToJson}
              className="px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700"
            >
              üì• Export JSON
            </button>
          </div>

          <div className="space-y-6">
            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Basic Information</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Attachment ID:</span>
                      <span className="font-mono">{attachment.id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">CMIS ID:</span>
                      <span>{attachment.cmisId || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Title:</span>
                      <span>{attachment.title || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">File Type:</span>
                      <span className="font-mono">{attachment.fileType || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">File Size:</span>
                      <span>{formatFileSize(attachment.fileSize)}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">Metadata</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Created:</span>
                      <span>{formatDate(attachment.createDate)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Created By:</span>
                      <span>{attachment.createdBy || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Updated:</span>
                      <span>{formatDate(attachment.updateDate)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Updated By:</span>
                      <span>{attachment.updatedBy || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Source Location:</span>
                      <span className="truncate">{attachment.sourceFileLocation || 'N/A'}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Document Type Information */}
            {attachment.documentType && (
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3">Document Type</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Type ID:</span>
                      <span className="font-mono">{attachment.documentType.id}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Description:</span>
                      <span>{attachment.documentType.description || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Note Type:</span>
                      <span>{formatBoolean(attachment.documentType.noteType)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Attachment Type:</span>
                      <span>{formatBoolean(attachment.documentType.attachmentType)}</span>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Confidential:</span>
                      <span className={`px-2 py-1 text-xs rounded ${
                        attachment.documentType.confidential ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
                      }`}>
                        {formatBoolean(attachment.documentType.confidential)}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Add Permission:</span>
                      <span>{attachment.documentType.addPermissionId || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">View Permission:</span>
                      <span>{attachment.documentType.viewPermissionId || 'N/A'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Edit Permission:</span>
                      <span>{attachment.documentType.editPermissionId || 'N/A'}</span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* File Content Preview */}
            {attachment.fileContent && (
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3">File Content</h3>
                <div className="p-4 bg-gray-50 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-gray-700">Content Preview:</span>
                    <span className="text-xs text-gray-500">
                      {attachment.fileContent.startsWith('data:') ? 'Base64 Encoded' : 'Text Content'}
                    </span>
                  </div>
                  {attachment.fileContent.startsWith('data:') ? (
                    <div className="text-sm text-gray-600">
                      <p>Binary file content (Base64 encoded)</p>
                      <p className="font-mono text-xs mt-2 break-all">
                        {attachment.fileContent.substring(0, 100)}...
                      </p>
                    </div>
                  ) : (
                    <pre className="text-sm text-gray-800 whitespace-pre-wrap max-h-40 overflow-y-auto">
                      {attachment.fileContent.length > 500 
                        ? `${attachment.fileContent.substring(0, 500)}...` 
                        : attachment.fileContent
                      }
                    </pre>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
